// Code generated by github.com/tinylib/msgp DO NOT EDIT.

package main

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *File) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return err
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return err
		}
		switch msgp.UnsafeString(field) {
		case "Identifier":
			z.Identifier, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Identifier")
				return err
			}
		case "Path":
			z.Path, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return err
			}
		case "Changed":
			z.Changed, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Changed")
				return err
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return err
			}
		}
	}
	return err
}

// EncodeMsg implements msgp.Encodable
func (z File) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Identifier"
	err = en.Append(0x83, 0xaa, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72)
	if err != nil {
		return err
	}
	err = en.WriteString(z.Identifier)
	if err != nil {
		err = msgp.WrapError(err, "Identifier")
		return err
	}
	// write "Path"
	err = en.Append(0xa4, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return err
	}
	err = en.WriteString(z.Path)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return err
	}
	// write "Changed"
	err = en.Append(0xa7, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64)
	if err != nil {
		return err
	}
	err = en.WriteTime(z.Changed)
	if err != nil {
		err = msgp.WrapError(err, "Changed")
		return err
	}
	return err
}

// MarshalMsg implements msgp.Marshaler
func (z File) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Identifier"
	o = append(o, 0x83, 0xaa, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72)
	o = msgp.AppendString(o, z.Identifier)
	// string "Path"
	o = append(o, 0xa4, 0x50, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	// string "Changed"
	o = append(o, 0xa7, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64)
	o = msgp.AppendTime(o, z.Changed)
	return o, err
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *File) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return o, err
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return o, err
		}
		switch msgp.UnsafeString(field) {
		case "Identifier":
			z.Identifier, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Identifier")
				return o, err
			}
		case "Path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return o, err
			}
		case "Changed":
			z.Changed, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Changed")
				return o, err
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return o, err
			}
		}
	}
	o = bts
	return o, err
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z File) Msgsize() (s int) {
	s = 1 + 11 + msgp.StringPrefixSize + len(z.Identifier) + 5 + msgp.StringPrefixSize + len(z.Path) + 8 + msgp.TimeSize
	return s
}
